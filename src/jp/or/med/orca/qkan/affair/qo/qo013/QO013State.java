
/*
 * Project code name "ORCA"
 * 給付管理台帳ソフト QKANCHO（JMA care benefit management software）
 * Copyright(C) 2002 JMA (Japan Medical Association)
 *
 * This program is part of "QKANCHO (JMA care benefit management software)".
 *
 * This program is distributed in the hope that it will be useful
 * for further advancement in medical care, according to JMA Open
 * Source License, but WITHOUT ANY WARRANTY.
 * Everyone is granted permission to use, copy, modify and
 * redistribute this program, but only under the conditions described
 * in the JMA Open Source License. You should have received a copy of
 * this license along with this program. If not, stop using this
 * program and contact JMA, 2-28-16 Honkomagome, Bunkyo-ku, Tokyo,
 * 113-8621, Japan.
 *****************************************************************
 * アプリ: QKANCHO
 * 開発者: 田中　統蔵
 * 作成日: 2006/06/02  日本コンピューター株式会社 田中　統蔵 新規作成
 * 更新日: ----/--/--
 * システム 給付管理台帳 (Q)
 * サブシステム その多機能 (O)
 * プロセス 日医標準レセプトソフト連携 (013)
 * プログラム 日医標準レセプトソフト連携 (QO013)
 *
 *****************************************************************
 */
package jp.or.med.orca.qkan.affair.qo.qo013;
/**
 * 日医標準レセプトソフト連携状態定義(QO013) 
 */
public class QO013State extends QO013Design {
  /**
   * コンストラクタです。
   */
  public QO013State(){
  }

  /**
   * 「未接続」の状態に設定します。
   * @throws Exception 処理例外
   */
  public void setState_NOT_CONNECTED() throws Exception {

        getImportPatient().setEnabled(false);

  }

  /**
   * 「接続済み」の状態に設定します。
   * @throws Exception 処理例外
   */
  public void setState_CONNECTED() throws Exception {

        getImportPatient().setEnabled(true);

  }

  /**
   * 「前ページなし」の状態に設定します。
   * @throws Exception 処理例外
   */
  public void setState_INVALID_PREVIEW_PAGE() throws Exception {

        getPreviewPage().setEnabled(false);

  }

  /**
   * 「前ページあり」の状態に設定します。
   * @throws Exception 処理例外
   */
  public void setState_VALID_PREVIEW_PAGE() throws Exception {

        getPreviewPage().setEnabled(true);

  }

  /**
   * 「次ページなし」の状態に設定します。
   * @throws Exception 処理例外
   */
  public void setState_INVALID_NEXT_PAGE() throws Exception {

        getNextPage().setEnabled(false);

  }

  /**
   * 「次ページあり」の状態に設定します。
   * @throws Exception 処理例外
   */
  public void setState_VALID_NEXT_PAGE() throws Exception {

        getNextPage().setEnabled(true);

  }

}
